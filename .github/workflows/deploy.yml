name: 'Terraform'

on:
  pull_request:
    branches:
      - main
    types: [opened, labeled, unlabeled]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to Perform'
        required: true
        type: choice
        options:
        - refresh
        - plan
        - apply
      product:
        description: 'Product Name to Deploy'
        required: true
        type: choice
        options:
        - common
        - auth
        - falcon
        - magicleap
        - hyperexecute
        - mobile
        - analytics
        - integrations
        - issue-tracker
        - tas
        - tunnel
        - backend-internals
        - security-team
        - networking
        - cost-optimisation

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment:
      name: dev
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TF_IN_AUTOMATION: true\
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get PR labels
        id: pr-labels
        uses: joerick/pr-labels-action@v1.0.6

      - name: test
        id: branch_check
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            echo "::set-output name=env_name::dev"
          elif [ "${{ github.ref }}" = "refs/heads/preprod" ]; then
            echo "::set-output name=env_name::preprod"
          elif [ "${{ github.ref }}" = "refs/heads/stage" ]; then
            echo "::set-output name=env_name::stage"
          elif [ "${{ github.ref }}" = "refs/heads/prod" ]; then
            echo "::set-output name=env_name::prod"
          else
            echo "::set-output name=env_name::None"
          fi

          echo ${{ steps.pr-labels.outputs.labels }}
          echo "Running on branch ${{ steps.pr-labels.outputs.labels }}"
          if [[ "${{ contains(steps.pr-labels.outputs.labels, 'project-mobile') }}" == "true" ]]; then
            echo "::set-output name=project::mobile"
          else
            echo "::set-output name=project::None"
          fi

      - name: test
        run: echo ${{ steps.branch_check.outputs.project }}


      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v1
      #   with:
      #     cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      #     terraform_version: 0.15.0
      # - name: Terraform Format
      #   if: always() && github.event_name == 'pull_request'
      #   id: fmt
      #   run: terraform fmt -check -recursive
      #   continue-on-error: true

      # - name: Post Format
      #   if: always() && github.ref != 'refs/heads/main' && (steps.fmt.outcome == 'success' || steps.fmt.outcome == 'failure') && github.event_name == 'pull_request'
      #   uses: robburger/terraform-pr-commenter@v1
      #   with:
      #     commenter_type: fmt
      #     commenter_input: ${{ format('{0}{1}', steps.fmt.outputs.stdout, steps.fmt.outputs.stderr) }}
      #     commenter_exitcode: ${{ steps.fmt.outputs.exitcode }}

      # - name: Terraform Init
      #   id: init
      #   run: terraform init

      # - name: Post Init
      #   if: always() && github.ref != 'refs/heads/main' && (steps.init.outcome == 'success' || steps.init.outcome == 'failure') && github.event_name == 'pull_request'
      #   uses: robburger/terraform-pr-commenter@v1
      #   with:
      #     commenter_type: init
      #     commenter_input: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
      #     commenter_exitcode: ${{ steps.init.outputs.exitcode }}

      # - name: Terraform Validate
      #   if: always() && github.event_name == 'pull_request'
      #   id: validate
      #   run: terraform validate

      # - name: Post Validate
      #   if: always() && github.ref != 'refs/heads/main' && (steps.validate.outcome == 'success' || steps.validate.outcome == 'failure') && github.event_name == 'pull_request'
      #   uses: robburger/terraform-pr-commenter@v1
      #   with:
      #     commenter_type: validate
      #     commenter_input: ${{ format('{0}{1}', steps.validate.outputs.stdout, steps.validate.outputs.stderr) }}
      #     commenter_exitcode: ${{ steps.validate.outputs.exitcode }}

      # - name: Terraform Plan
      #   id: plan
      #   run: terraform plan -out workspace.plan -input=false

      # - name: Post Plan
      #   if: always() && github.ref != 'refs/heads/main' && (steps.plan.outcome == 'success' || steps.plan.outcome == 'failure') && github.event_name == 'pull_request'
      #   uses: robburger/terraform-pr-commenter@v1
      #   with:
      #     commenter_type: plan
      #     commenter_input: ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
      #     commenter_exitcode: ${{ steps.plan.outputs.exitcode }}

      # - name: Terraform apply
      #   if: always() && github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
      #   run: terraform apply --auto-approve -input=false workspace.plan
